<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ Assembly Name="EnvDTE.dll" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    string tableName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
    string path = Path.GetDirectoryName(Host.TemplateFile);
    string columnId ="ID";
    string columnName = "Name";
    string columnDescription = "Description";
    string connectionString = "data source=.;initial catalog=Pool;integrated security=SSPI";
 
    // Get containing project
    IServiceProvider serviceProvider = (IServiceProvider)Host;
    DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));
    Project project = dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;
#>
using System;
using System.CodeDom.Compiler;
 
namespace <#= project.Properties.Item("DefaultNamespace").Value #><#= Path.GetDirectoryName(Host.TemplateFile).Remove(0, Path.GetDirectoryName(project.FileName).Length).Replace("\\", ".") #>
{
    /// <summary>
    /// <#= tableName #> auto generated enumeration
    /// </summary>
    [GeneratedCode("TextTemplatingFileGenerator", "10")]
    public class <#= tableName #>
    {
<#
    SqlConnection conn = new SqlConnection(connectionString);
    string command = string.Format("select top 1 * from [{3}]", columnId, columnName, columnDescription, tableName);
    SqlCommand comm = new SqlCommand(command, conn);
 
    conn.Open();
 
    SqlDataReader reader = comm.ExecuteReader(CommandBehavior.SchemaOnly);
    bool loop = reader.Read();
 
  var colcount = reader.FieldCount;
            for (int i = 0; i < colcount; i++)
            {
                var colName = reader.GetName(i);
				colName=RemoveUnderline(colName);
				if (colName==tableName)//Будет ошшибка что имя класса не должно совпадать с полем
                {
					colName+="1";
				}

				var dbtypename=reader.GetDataTypeName(i);
#>		public <#= DBTypeNameToCSTypeName(dbtypename)  #> <#= colName #>  { get; set; }
<#
            }
#>	}
}
<#+
    private string Pascalize(object value)
    {
        Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }
	private string RemoveUnderline(string fieldName)
    {
		return fieldName.Replace("_ID","ID");
    }
	private string DBTypeNameToCSTypeName(string dbtypename)
	{
	switch (dbtypename)
		{	
		case "smallint":
			return "short";
		case "char":
		case "varchar":
			return "string";
		case "tinyint":
			return "sbyte";
		case "date":
		case "datetime":
		case "datetime2":
			return "DateTime";
		case "bit":
			return "bool";
		case "uniqueidentifier":
			return "Guid";
		case "bigint":
			return "long";
		default:
			return dbtypename;
        }
	}
#>